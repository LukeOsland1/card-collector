# Raspberry Pi System Optimizations for Card Collector
# These configurations help optimize performance for running the Discord bot

# GPU Memory Split Configuration
# Add to /boot/config.txt
[boot-config]
# Allocate more memory to GPU for better performance
gpu_mem=128

# Enable hardware acceleration if available
dtoverlay=vc4-kms-v3d
max_framebuffers=2

# CPU Governor - Performance mode for consistent performance
# May increase power consumption but reduces latency
arm_freq=1800
core_freq=500
sdram_freq=500

# Memory overclocking (Pi 4 only - use with caution)
over_voltage=2
arm_freq=1800

# Temperature monitoring
temp_limit=80

# Kernel Command Line Parameters
# Add to /boot/cmdline.txt (on same line, space separated)
[cmdline-additions]
# Enable memory cgroups for Docker
cgroup_memory=1 cgroup_enable=memory

# Reduce memory allocation for GPU if not needed
gpu_mem=64

# System Limits Configuration
# Add to /etc/security/limits.conf
[system-limits]
# Increase file descriptor limits
* soft nofile 65536
* hard nofile 65536

# Increase process limits
* soft nproc 32768
* hard nproc 32768

# Memory limits for applications
* soft memlock 64
* hard memlock 64

# Systemctl Configuration
# Add to /etc/systemd/system.conf
[systemd-config]
# Increase service restart limits
DefaultStartLimitBurst=5
DefaultStartLimitInterval=30s
DefaultRestartSec=5s

# Increase timeout for services
DefaultTimeoutStartSec=300s
DefaultTimeoutStopSec=60s

# Docker Daemon Configuration
# Create /etc/docker/daemon.json
[docker-config]
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "storage-driver": "overlay2",
  "experimental": false,
  "live-restore": true,
  "userland-proxy": false,
  "no-new-privileges": true,
  "default-runtime": "runc",
  "runtimes": {
    "runc": {
      "path": "runc"
    }
  }
}

# Network Optimizations
# Add to /etc/sysctl.conf or /etc/sysctl.d/99-pi-tuning.conf
[network-tuning]
# TCP optimizations
net.core.somaxconn = 1024
net.core.netdev_max_backlog = 5000

# Memory management
vm.swappiness = 10
vm.dirty_ratio = 15
vm.dirty_background_ratio = 5

# File system optimizations
fs.file-max = 65536

# Network buffer sizes
net.core.rmem_default = 262144
net.core.rmem_max = 16777216
net.core.wmem_default = 262144
net.core.wmem_max = 16777216

# PostgreSQL Configuration for Pi
# Add to postgresql.conf (if using PostgreSQL)
[postgresql-pi-config]
# Memory settings for Pi
shared_buffers = 128MB
effective_cache_size = 1GB
work_mem = 4MB
maintenance_work_mem = 64MB

# Connection settings
max_connections = 50
superuser_reserved_connections = 3

# Checkpoint settings
checkpoint_completion_target = 0.9
wal_buffers = 16MB
checkpoint_timeout = 10min
max_wal_size = 1GB
min_wal_size = 80MB

# Query planner settings
random_page_cost = 4.0
effective_io_concurrency = 2
default_statistics_target = 100

# Logging settings (reduce for Pi)
log_min_duration_statement = 1000
log_checkpoints = off
log_connections = off
log_disconnections = off
log_temp_files = 10MB

# Auto vacuum settings
autovacuum_max_workers = 2
autovacuum_naptime = 60s

# Swap Configuration
# Run these commands to optimize swap
[swap-commands]
# Increase swap size to 2GB
sudo dphys-swapfile swapoff
sudo sed -i 's/CONF_SWAPSIZE=.*/CONF_SWAPSIZE=2048/' /etc/dphys-swapfile
sudo dphys-swapfile setup
sudo dphys-swapfile swapon

# Set swappiness (how aggressively to use swap)
echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf

# SD Card Optimizations
[sd-optimizations]
# Add to /etc/fstab for better SD card performance
# (Note: Only use these with good quality SD cards)
tmpfs /tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=1777,size=100M 0 0
tmpfs /var/tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=1777,size=50M 0 0
tmpfs /var/log tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=100M 0 0

# Mount options for SD card
# Change existing root mount to include noatime
/dev/mmcblk0p2 / ext4 defaults,noatime 0 1

# Log Rotation Configuration
# Create /etc/logrotate.d/card-collector
[logrotate-config]
/home/pi/card-collector/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    copytruncate
    maxage 30
}

# Docker container logs
/var/lib/docker/containers/*/*.log {
    daily
    missingok
    rotate 3
    compress
    delaycompress
    notifempty
    copytruncate
    maxage 7
}

# Cron Jobs for Maintenance
[cron-maintenance]
# Add to crontab with: crontab -e

# Clean Docker system daily at 2 AM
0 2 * * * docker system prune -f

# Rotate logs weekly
0 3 * * 0 logrotate -f /etc/logrotate.conf

# Check disk space and cleanup if needed
0 4 * * * /home/pi/card-collector/scripts/pi/cleanup_disk.sh

# Monitor system resources and restart if needed
*/30 * * * * /home/pi/card-collector/scripts/pi/health_check.sh

# Restart services weekly to prevent memory leaks
0 5 * * 0 /home/pi/card-collector/scripts/pi/weekly_restart.sh

# Thermal Management
[thermal-config]
# Create /usr/local/bin/thermal_monitor.sh for basic fan control
# (if you have a fan connected to GPIO)

# Monitor temperature and throttling
# Add to cron: */5 * * * * /usr/local/bin/check_thermal.sh

# Fan control thresholds
TEMP_ON=65
TEMP_OFF=55
FAN_GPIO=14

# Check CPU frequency scaling
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq

# I/O Scheduler Optimization
[io-scheduler]
# For SD cards, use 'none' or 'mq-deadline'
echo none | sudo tee /sys/block/mmcblk0/queue/scheduler

# For USB drives/SSDs, use 'mq-deadline' 
echo mq-deadline | sudo tee /sys/block/sda/queue/scheduler

# Make permanent in /etc/udev/rules.d/60-io-scheduler.rules
ACTION=="add|change", KERNEL=="mmcblk0", ATTR{queue/scheduler}="none"
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/scheduler}="mq-deadline"

# Python Specific Optimizations
[python-opts]
# Environment variables for Python performance
export PYTHONUNBUFFERED=1
export PYTHONDONTWRITEBYTECODE=1
export PYTHONHASHSEED=random
export MALLOC_TRIM_THRESHOLD_=65536

# Reduce Python memory usage
export PYTHONMALLOC=malloc

# Discord.py specific optimizations
export DISCORD_PY_MAX_MESSAGES=1000
export DISCORD_PY_CHUNK_GUILDS_AT_STARTUP=0

# Installation Notes
[install-notes]
# 1. Copy relevant sections to appropriate config files
# 2. Reboot after making changes to /boot/config.txt and /boot/cmdline.txt  
# 3. Test one optimization at a time
# 4. Monitor system stability after changes
# 5. Use the monitoring script to check performance impact

# Performance Monitoring Commands
[monitoring-commands]
# CPU temperature
vcgencmd measure_temp

# CPU frequency  
vcgencmd measure_clock arm

# Memory usage
free -h

# Disk I/O
iostat -x 1

# Network usage
iftop

# Process monitoring
htop

# Docker resource usage
docker stats

# System load
uptime

# Check for throttling
vcgencmd get_throttled